"""generate setup.json from Pipfile

Example:
    >>> python setup_generate.py ./Pipfile ./setup.json
"""

from pathlib import Path
import json
import sys

import toml

class DependencyParser:
    """parse a pipfile to get the requirements

    Parameters
    ----------
    path_to_pipfile : str
        path to the pipfile

    Methods
    -------
        dump_requirements(path)
            dump the requirements to a json file in the format expected by setup.py

    """

    def __init__(self, path_to_pipfile: Path | str):
        self.path_to_pipfile = path_to_pipfile
        with open(path_to_pipfile) as f:
            self.pipfile = toml.load(f)

    def __repr__(self):
        return f"DependencyParser({self.path_to_pipfile})"

    @staticmethod
    def pipenv_to_setuptools(package_name: str, contraints: str | dict) -> str:
        if contraints == "*":
            res = f"{package_name}"
        elif (contraints != "*") and isinstance(contraints, str):
            res = f"{package_name}{contraints}"
        elif isinstance(contraints, dict):
            res = f"{package_name}{contraints['version']}"
        else:
            raise ValueError(f"Could not parse {package_name}, {contraints}")

        return res

    @property
    def min_python(self) -> str:
        """return the minimum python version"""
        return self.pipfile["requires"]["python_version"]

    @property
    def requirements(self):
        """return the requirements in setuptools format"""
        return [
            self.pipenv_to_setuptools(k, v) for k, v in self.pipfile["packages"].items()
        ]

    @property
    def dev_requirements(self):
        """return the dev requirements in setuptools format"""
        return [
            self.pipenv_to_setuptools(k, v)
            for k, v in self.pipfile["dev-packages"].items()
        ]

    def dump_requirements(self, path: Path | str):
        if isinstance(path, str):
            path = Path(path)

        assert path.name.endswith(".json"), "path must end with .json"

        with open(path, "w") as f:
            reqs = {
                "_comment": "# WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT!",
                "min_python": self.min_python,
                "requirements": self.requirements,
                "dev_requirements": self.dev_requirements,
            }
            json.dump(reqs, f, indent=4)


if __name__ == "__main__":
    # example:
    # python setup_generate.py ./Pipfile ./setup.json

    pipfile_path = Path(sys.argv[1])
    target_path = Path(sys.argv[2])
    print(f"reading pipfile at {pipfile_path}")
    dp = DependencyParser(pipfile_path)

    print(f"dumping requirements to {target_path}")
    dp.dump_requirements(target_path)

    print("done")
